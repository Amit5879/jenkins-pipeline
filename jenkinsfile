pipeline {
    agent any
    environment {
        DIRECTORY_PATH = '/Users/amitkafe/Documents/university/year 2/trimester 2/SIT223/task 5.1'
        STAGING_ENVIRONMENT = 'AWS-EC2-Staging'
        PRODUCTION_ENVIRONMENT = 'AWS-EC2-Production'
        RECIPIENT_EMAIL = "amitkafe5@gmail.com"
    }
    stages {
        stage('Build') {
            steps {
                echo 'Stage 1: Build - Building the code using Maven'
                echo 'Tool: Maven'
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                echo 'Stage 2: Unit and Integration Tests - Running unit and integration tests using JUnit'
                echo 'Tool: JUnit'
            }
        }
        stage('Code Analysis') {
            steps {
                echo 'Stage 3: Code Analysis - Analyzing code quality using SonarQube'
                echo 'Tool: SonarQube'
            }
        }
        stage('Security Scan') {
            steps {
                echo 'Stage 4: Security Scan - Scanning code for vulnerabilities using OWASP ZAP'
                echo 'Tool: OWASP ZAP'
            }
        }
        stage('Deploy to Staging') {
            steps {
                echo 'Stage 5: Deploy to Staging - Deploying to the staging environment'
                echo "Environment: ${env.STAGING_ENVIRONMENT}"
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                echo 'Stage 6: Integration Tests on Staging - Running integration tests on the staging environment'
                echo 'Tool: JUnit'
            }
        }
        stage('Deploy to Production') {
            steps {
                echo 'Stage 7: Deploy to Production - Deploying to the production environment'
                echo "Environment: ${env.PRODUCTION_ENVIRONMENT}"
            }
        }
    }
    post {
        always {
            script {
                if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {
                    def logFile = "${env.WORKSPACE}/pipeline-log.log"
                    writeFile file: logFile, text: currentBuild.rawBuild.getLog(50).join("\n")

                    if (currentBuild.rawBuild.getExecutedStages().find { it.name == 'Unit and Integration Tests' || it.name == 'Security Scan' }) {
                        emailext to: "${env.RECIPIENT_EMAIL}",
                                 subject: "Stage Status: ${currentBuild.result}",
                                 body: "The stage completed with status: ${currentBuild.result}",
                                 attachmentsPattern: logFile,
                                 attachLog: true
                    }
                }
            }
        }
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
